Notes on Indigo Build System

TODO:  This document is currently in draft form.

Overview

The Indigo build system is a make-based system for generating
directories and flashable binary images used to boot and run Indigo
base OpenFlow switches.

IODS is the open source distribution of the build system and sources.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Supported Platforms

Each platform has a string to identify it and resulting products.

gsm73xx:     Netgear GSM7328SO and GSM7352SO
lb9a:        Pronto 3290
lb8:         Pronto 3780
lb4g:        Pronto 3240
t2ref:       Broadcom Triumph 2 reference design

IODS releases correspond with binary releases.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Tools

Two tool chains are distributed under IODS which are minor variations
with different board support for Pronto vs Netgear platforms.  

For Pronto and Broadcom reference designs, use the ELDK_4.2 tools.

For GSM73xx systems, use the iods-ntgr-bld tools.

These tool chains will be distributed in IODS VMs.  They will likely
be available for download and pointed to from the Indigos section
of openflowhub.org.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

High Level Architecture

The build system is distributed across different directories to
provide some modularity based on the platform.  These should all be at
the same level in terms of the directory hierarchy.  They include:

indigo-core:  The location of the make files and components common to
the different platforms including the OpenFlow sources

indigo-gsm73xx:  The location of platform specific code for the
Netgear GSM73xx systems.

indigo-lb9a:  The location of platform specific code for the
Pronto 3290 system.

indigo-lb89:  The location of platform specific code for the
Pronto 3780 system.

indigo-lb4g:  The location of platform specific code for the
Pronto 3240 system.

indigo-bcm-ref:  The location of platform specific code for the
Broadcom T2 reference design.

indigo-ui:  The location of user interface sources such as JSON and
Lua.


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Components

Key components involved in building the products include:

A Linux kernel.  This is normally in the indigo-<platform> directory.
Note that the tools normally need to be linked to the Linux source
directory to properly pick up the header files.  This is done by the
tool-env-init target in common.mk.

OpenFlow source: This is in indigo-core/openflow.  In the IODS build,
this is used to generate the additional executables like ofprotocol.
Since the main OpenFlow driver (normally ofdatapath) is integrated
with the ASIC drivers, the executable ofswd is not generated by IODS.

u-boot:  This is normally in indigo-<platform>.  Updating u-boot is
not documented here, but the sources are provided for reference.

busybox:  This provides the core shell commands expected for using the
Linux environment.  Usually this is in the platform directory, but a
default version is in indigo-core.

dropbear:  Provides SSH server service to the system.  All platforms
currently use the version in indigo-core.

Prebuilt binaries:  Drivers for the switch ASICs in Indigo systems are
distributed as binaries.  See TBD for more details.  The binaries
are usually distributed as a tar file placed in the top level directory
and the build process puts them into the target root file system.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

The Make System

The top level make file has a target per platform.  That target simply
re-invokes make on the platform specific makefile.

Each platform has its own make file with the name <plat>.mk.  For
example, gsm73xx.mk.

There is also a file common.mk which is sourced by all platform
specific make files.  It gives default values to variables and
contains rules common to the treatment of products in the system.

For the Pronto platforms, the file quanta.mk is included after
common.mk.  This contains most of the defines needed for building the
Pronto platforms.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

IMPORTANT NOTES FOR DEVELOPING

Platform make environment must define the following:

target-rootfs-init:  This target must create and setup ${TARGET_ROOTFS}

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Key Make Variables

These variables must be defined prior to invoking make.  They are
normally defined by sourcing the file build-files/env (or env.tcsh).

TOP_LEVEL_DIR:  The directory containing all the component directories
such as indigo-core, indigo-<plat>, cmdsrv and indigo-ui.

CORE_DIR: The indigo-core directory where builds are done.

TOOLS_DIR:  The directory where the ELDK tool chain lives (for
Pronto and reference design builds)

NETGEAR_TOP:  Where the Netgear ELDK tool chain lives; for the 
gsm73xx target only

PLATFORM_ROOT is the directory containing platform specific sources
and other resources.  Defined in the platform specific makefile, but
generally indigo-<plat>

TEMPLATE_ROOTFS is the platform specific template for the root FS.
Generally ${PLATFORM_ROOT}/rootfs-template

TARGET_ROOTFS the directory that holds the root FS used to generate 
the rootfs image.  It starts with TEMPLATE_ROOTFS and gets populated
with build products.  It may also be transfered to an NFS mount.

TARGET_ROOTFS_IMAGE the root FS binary image that may be combined
with other components (Linux kernel, boot loader) or copied into
flash alone.  It is generated from TARGET_ROOTFS

BINARY_FILES_TARGET holds the (make) target for populating the non-
source binaries into the target root FS.  For IODS builds, these are
prebuilt and just copied into the target FS.  For full source
distributions the binaries are normally built from source before
being copied to the target FS.

LINUX_ROOT holds the location of the Linux kernel sources.

PRODUCT_DIR holds the location of where final build products are
placed.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Notes

    For Quanta/Pronto make targets, see quanta.mk for most targets.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Generating the Root File System

The target root file system is started from a template.  For Indigo
branded platforms such as the 3290, the first template is the common 
one in indigo-core/indigo-rootfs-template.  Then the platform specific
template is copied on top of that.  For the gsm73xx target, only 
the platform specific template is used.  In either case, components
are then built and installed into the target root filesystem.

Once created, the target root filesystem may have any number of things
done to it.  It may be converted to a flash image or copied over to
an NFS mountable location.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Generating the IODS Releases

Once a binary release has been tagged (that tag is usually called
RELEASE_NAME in the build) an IODS version of the release may be
generated by running 'make <plat>-iods-prep RELEASE_NAME=<tag>' in 
indigo-core.

This generates a directory in TOP_LEVEL_DIR containing all the build 
directories set up for IODS.  The name of this directory is
iods-${RELEASE_NAME}.

When generating the IODS directory, the following is done:

* The repositories indigo-core, indigo-ui, cmdsrv and one or more
platform repos (indigo-gsm73xx, indigo-lb9a, etc) are cloned to the
IODS directory.

* The release tag is checked out in each repo that was cloned.

* The git directory is removed from each repo.

* Files are stripped of code between IODS_EXCLUDE_BEGIN and 
IODS_EXCLUDE_END.  The string must have a # character followed by 
0 or more spaces and the _BEGIN or _END tag.  All files at the top
level are checked.  Additional files deeper in the hierarchy will be 
stripped if they are listed in file iods-strip at the top level of the 
repo.

* Files are removed:  If a file (or directory) is listed in
iods-remove, it is deleted.  This applies to each repository
independently.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

External products

External products are those not covered by the make file.

Normally a product integrated in the root filesystem should have
an install target that places the result into the template root
filesystem.

  u-boot: Completely separate product
  Linux kernel: Separate product, but need header files for other products
    The Linux kernel is built for most releases.
  device-tree: lb9a only.  Separate product; target given in make file

The following are products that are normally built prior to the main
build.  They typically will not change frequently, though currently 
they are still built all the time.

  platform specific drivers
  lua, lua-sockets, haserl
  dropbear ssh server
  busybox applications

TBD:  Explain what's below.

Products:
  Other applications
    sfs (simple flash filesystem to keep config data)
    dropbear ssh server
  ofswd
    command server library
    openflow library
    socdiag exec
  openflow execs (ofprotocol, dpctl)

  Fully populated root file system
  Flash image containing rootfs (uInitrd2m)
  Flash image containing kernel and rootfs (mtd0image): gsm73xx only
  

Target Filesystem Conventions
  /local is a locally mounted file system
    /local/config contains the configuration data for the system
       When sfs is used, config should be a link to sfs.
    /local/httpd root of web served files
    /local/logs where logs are stored

  See also the initialization and configuration notes at
  http://www.openflow.org/wk/index.php/IndigoConfiguration


