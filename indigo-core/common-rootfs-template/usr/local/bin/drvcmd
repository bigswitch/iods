#!/bin/lua
-- Copyright 2011 Big Switch Networks
--
-- CLI command: drvcmd
--
-- Run a driver command and dump log where output shows up

require "ui_cs_op"
require "ui_utils"
require "optparse"

-- Run a shell commmand and return the output
-- Not re-entrant...:)
function get_cmd_output(cmd, filename)
   if not filename then
      filename = "/tmp/_tmp_data"
   end
   os.execute("rm -f " .. filename)
   os.execute(cmd .. " > " .. filename)
   return read_file(filename)
end

local opt_desc={usage="Run a driver command and show the output",
                version="1.0"}
local op = OptionParser(opt_desc)
op.add_option({"-c", "--command", action="store", dest="command", 
               help="The command to run"})

local options, args = op.parse_args()
local str = options.command
if not str or str == '' then
   str = args[1]
end

local content = "did not run command"

local log_dir = os.getenv('log_dir')
if log_dir == nil then
  log_dir = '/local/logs'
end
log_file = log_dir .. '/ofswd.log'

pre = get_cmd_output("wc -c " .. log_file .. "|awk '{print $1}'")
if str and str ~= "" then
   print("Running command: " .. str)
   local status, results, errstr = cs_drvcmd(0, str)
   if status ~= nil then 
      report_rest_status(status, errstr)
   end
   if reply ~= nil then
      printf("Got reply %s\n", reply)
   end
   os.execute("sleep 1")
   post = get_cmd_output("wc -c " .. log_file .. "|awk '{print $1}'")
   bytes = post - pre
   content = get_cmd_output("tail -c " .. bytes .. " " .. log_file)
end

print(content)

